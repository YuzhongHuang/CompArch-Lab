$date
	Thu Nov 19 23:05:39 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testCPU $end
$var reg 1 ! clk $end
$scope module ourCpu $end
$var wire 6 " ALUOP [5:0] $end
$var wire 1 # ALU_SRCA $end
$var wire 2 $ ALU_SRCB [1:0] $end
$var wire 32 % A_AluMuxA [31:0] $end
$var wire 1 & A_WE $end
$var wire 32 ' AluMuxA_Alu [31:0] $end
$var wire 32 ( AluMuxB_Alu [31:0] $end
$var wire 32 ) AluRes_out [31:0] $end
$var wire 32 * Alu_out [31:0] $end
$var wire 1 + B_WE $end
$var wire 32 , B_out [31:0] $end
$var wire 32 - Concat_PCMux [31:0] $end
$var wire 32 . DM_out [31:0] $end
$var wire 2 / DST [1:0] $end
$var wire 5 0 DstMux_RegFile [4:0] $end
$var wire 26 1 IR_Concat [25:0] $end
$var wire 6 2 IR_FSM_funct [5:0] $end
$var wire 6 3 IR_FSM_opcode [5:0] $end
$var wire 16 4 IR_Imm16 [15:0] $end
$var wire 5 5 IR_Rd [4:0] $end
$var wire 5 6 IR_Rs [4:0] $end
$var wire 5 7 IR_Rt [4:0] $end
$var wire 1 8 IR_WE $end
$var wire 32 9 MDR_RegMux [31:0] $end
$var wire 1 : MEMIN $end
$var wire 1 ; MEM_WE $end
$var wire 32 < MemMux_DM [31:0] $end
$var wire 32 = PCMux_PC [31:0] $end
$var wire 2 > PC_SRC [1:0] $end
$var wire 1 ? PC_WE $end
$var wire 32 @ PC_out [31:0] $end
$var wire 1 A REGIN $end
$var wire 1 B REG_WE $end
$var wire 32 C RegFile_A [31:0] $end
$var wire 32 D RegFile_B [31:0] $end
$var wire 32 E RegMux_RegFile [31:0] $end
$var wire 32 F SEImm_out [31:0] $end
$var wire 32 G Shifter_AluMuxB [31:0] $end
$var wire 1 H clk $end
$var wire 1 I zeroflag $end
$scope module FSM $end
$var wire 6 J IR_ALU_OP [5:0] $end
$var wire 1 H clk $end
$var wire 6 K instr [5:0] $end
$var wire 4 L next_state [3:0] $end
$var wire 1 I zeroflag $end
$var reg 6 M ALU_OP [5:0] $end
$var reg 1 N ALU_SRCA $end
$var reg 2 O ALU_SRCB [1:0] $end
$var reg 1 P A_WE $end
$var reg 1 Q B_WE $end
$var reg 2 R DST [1:0] $end
$var reg 1 S IR_WE $end
$var reg 1 T MEM_IN $end
$var reg 1 U MEM_WE $end
$var reg 2 V PC_SRC [1:0] $end
$var reg 1 W PC_WE $end
$var reg 1 X REG_IN $end
$var reg 1 Y REG_WE $end
$var reg 4 Z state [3:0] $end
$scope module LUT $end
$var wire 1 H clk $end
$var wire 6 [ opcode [5:0] $end
$var wire 4 \ state [3:0] $end
$var reg 4 ] next_state [3:0] $end
$upscope $end
$upscope $end
$scope module PC $end
$var wire 1 H clk $end
$var wire 32 ^ in [31:0] $end
$var wire 1 ? wr_enable $end
$var reg 32 _ q [31:0] $end
$upscope $end
$scope module MDR $end
$var wire 1 H clk $end
$var wire 32 ` in [31:0] $end
$var wire 1 a wr_enable $end
$var reg 32 b q [31:0] $end
$upscope $end
$scope module A $end
$var wire 1 H clk $end
$var wire 32 c in [31:0] $end
$var wire 1 d wr_enable $end
$var reg 32 e q [31:0] $end
$upscope $end
$scope module B $end
$var wire 1 H clk $end
$var wire 32 f in [31:0] $end
$var wire 1 g wr_enable $end
$var reg 32 h q [31:0] $end
$upscope $end
$scope module Alu_Res $end
$var wire 1 H clk $end
$var wire 32 i in [31:0] $end
$var wire 1 j wr_enable $end
$var reg 32 k q [31:0] $end
$upscope $end
$scope module DM $end
$var wire 32 l address [31:0] $end
$var wire 1 H clk $end
$var wire 32 m din [31:0] $end
$var wire 32 n dout [31:0] $end
$var wire 1 ; wr_enable $end
$upscope $end
$scope module IR $end
$var wire 1 8 IR_WE $end
$var wire 1 H clk $end
$var wire 32 o instr [31:0] $end
$var reg 26 p J_addr [25:0] $end
$var reg 5 q Rd [4:0] $end
$var reg 5 r Rs [4:0] $end
$var reg 5 s Rt [4:0] $end
$var reg 6 t funct [5:0] $end
$var reg 16 u imm [15:0] $end
$var reg 6 v opcode [5:0] $end
$upscope $end
$scope module Concat $end
$var wire 32 w PC [31:0] $end
$var wire 32 x concat [31:0] $end
$var wire 26 y dout [25:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 16 z imm [15:0] $end
$var wire 32 { se [31:0] $end
$upscope $end
$scope module ShifterLeft2 $end
$var wire 32 | in [31:0] $end
$var wire 32 } out [31:0] $end
$upscope $end
$scope module RegisterFile $end
$var wire 1 H Clk $end
$var wire 32 ~ ReadData1 [31:0] $end
$var wire 32 !" ReadData2 [31:0] $end
$var wire 5 "" ReadRegister1 [4:0] $end
$var wire 5 #" ReadRegister2 [4:0] $end
$var wire 1 B RegWrite $end
$var wire 32 $" RegisterToWrite [31:0] $end
$var wire 32 %" WriteData [31:0] $end
$var wire 5 &" WriteRegister [4:0] $end
$scope module decoder1 $end
$var wire 5 '" address [4:0] $end
$var wire 1 B enable $end
$var wire 32 (" out [31:0] $end
$upscope $end
$scope module register0 $end
$var wire 1 H clk $end
$var wire 32 )" d [31:0] $end
$var wire 32 *" q [31:0] $end
$var wire 1 +" wrenable $end
$upscope $end
$scope module mux1 $end
$var wire 5 ," address [4:0] $end
$var wire 32 -" input0 [31:0] $end
$var wire 32 ." input1 [31:0] $end
$var wire 32 /" input10 [31:0] $end
$var wire 32 0" input11 [31:0] $end
$var wire 32 1" input12 [31:0] $end
$var wire 32 2" input13 [31:0] $end
$var wire 32 3" input14 [31:0] $end
$var wire 32 4" input15 [31:0] $end
$var wire 32 5" input16 [31:0] $end
$var wire 32 6" input17 [31:0] $end
$var wire 32 7" input18 [31:0] $end
$var wire 32 8" input19 [31:0] $end
$var wire 32 9" input2 [31:0] $end
$var wire 32 :" input20 [31:0] $end
$var wire 32 ;" input21 [31:0] $end
$var wire 32 <" input22 [31:0] $end
$var wire 32 =" input23 [31:0] $end
$var wire 32 >" input24 [31:0] $end
$var wire 32 ?" input25 [31:0] $end
$var wire 32 @" input26 [31:0] $end
$var wire 32 A" input27 [31:0] $end
$var wire 32 B" input28 [31:0] $end
$var wire 32 C" input29 [31:0] $end
$var wire 32 D" input3 [31:0] $end
$var wire 32 E" input30 [31:0] $end
$var wire 32 F" input31 [31:0] $end
$var wire 32 G" input4 [31:0] $end
$var wire 32 H" input5 [31:0] $end
$var wire 32 I" input6 [31:0] $end
$var wire 32 J" input7 [31:0] $end
$var wire 32 K" input8 [31:0] $end
$var wire 32 L" input9 [31:0] $end
$var wire 32 M" out [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 5 N" address [4:0] $end
$var wire 32 O" input0 [31:0] $end
$var wire 32 P" input1 [31:0] $end
$var wire 32 Q" input10 [31:0] $end
$var wire 32 R" input11 [31:0] $end
$var wire 32 S" input12 [31:0] $end
$var wire 32 T" input13 [31:0] $end
$var wire 32 U" input14 [31:0] $end
$var wire 32 V" input15 [31:0] $end
$var wire 32 W" input16 [31:0] $end
$var wire 32 X" input17 [31:0] $end
$var wire 32 Y" input18 [31:0] $end
$var wire 32 Z" input19 [31:0] $end
$var wire 32 [" input2 [31:0] $end
$var wire 32 \" input20 [31:0] $end
$var wire 32 ]" input21 [31:0] $end
$var wire 32 ^" input22 [31:0] $end
$var wire 32 _" input23 [31:0] $end
$var wire 32 `" input24 [31:0] $end
$var wire 32 a" input25 [31:0] $end
$var wire 32 b" input26 [31:0] $end
$var wire 32 c" input27 [31:0] $end
$var wire 32 d" input28 [31:0] $end
$var wire 32 e" input29 [31:0] $end
$var wire 32 f" input3 [31:0] $end
$var wire 32 g" input30 [31:0] $end
$var wire 32 h" input31 [31:0] $end
$var wire 32 i" input4 [31:0] $end
$var wire 32 j" input5 [31:0] $end
$var wire 32 k" input6 [31:0] $end
$var wire 32 l" input7 [31:0] $end
$var wire 32 m" input8 [31:0] $end
$var wire 32 n" input9 [31:0] $end
$var wire 32 o" out [31:0] $end
$upscope $end
$scope begin registerGen[1] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 p" d [31:0] $end
$var wire 1 q" wrenable $end
$var reg 32 r" q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[2] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 s" d [31:0] $end
$var wire 1 t" wrenable $end
$var reg 32 u" q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[3] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 v" d [31:0] $end
$var wire 1 w" wrenable $end
$var reg 32 x" q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[4] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 y" d [31:0] $end
$var wire 1 z" wrenable $end
$var reg 32 {" q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[5] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 |" d [31:0] $end
$var wire 1 }" wrenable $end
$var reg 32 ~" q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[6] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 !# d [31:0] $end
$var wire 1 "# wrenable $end
$var reg 32 ## q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[7] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 $# d [31:0] $end
$var wire 1 %# wrenable $end
$var reg 32 &# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[8] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 '# d [31:0] $end
$var wire 1 (# wrenable $end
$var reg 32 )# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[9] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 *# d [31:0] $end
$var wire 1 +# wrenable $end
$var reg 32 ,# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[10] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 -# d [31:0] $end
$var wire 1 .# wrenable $end
$var reg 32 /# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[11] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 0# d [31:0] $end
$var wire 1 1# wrenable $end
$var reg 32 2# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[12] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 3# d [31:0] $end
$var wire 1 4# wrenable $end
$var reg 32 5# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[13] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 6# d [31:0] $end
$var wire 1 7# wrenable $end
$var reg 32 8# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[14] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 9# d [31:0] $end
$var wire 1 :# wrenable $end
$var reg 32 ;# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[15] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 <# d [31:0] $end
$var wire 1 =# wrenable $end
$var reg 32 ># q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[16] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 ?# d [31:0] $end
$var wire 1 @# wrenable $end
$var reg 32 A# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[17] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 B# d [31:0] $end
$var wire 1 C# wrenable $end
$var reg 32 D# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[18] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 E# d [31:0] $end
$var wire 1 F# wrenable $end
$var reg 32 G# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[19] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 H# d [31:0] $end
$var wire 1 I# wrenable $end
$var reg 32 J# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[20] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 K# d [31:0] $end
$var wire 1 L# wrenable $end
$var reg 32 M# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[21] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 N# d [31:0] $end
$var wire 1 O# wrenable $end
$var reg 32 P# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[22] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 Q# d [31:0] $end
$var wire 1 R# wrenable $end
$var reg 32 S# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[23] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 T# d [31:0] $end
$var wire 1 U# wrenable $end
$var reg 32 V# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[24] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 W# d [31:0] $end
$var wire 1 X# wrenable $end
$var reg 32 Y# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[25] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 Z# d [31:0] $end
$var wire 1 [# wrenable $end
$var reg 32 \# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[26] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 ]# d [31:0] $end
$var wire 1 ^# wrenable $end
$var reg 32 _# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[27] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 `# d [31:0] $end
$var wire 1 a# wrenable $end
$var reg 32 b# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[28] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 c# d [31:0] $end
$var wire 1 d# wrenable $end
$var reg 32 e# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[29] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 f# d [31:0] $end
$var wire 1 g# wrenable $end
$var reg 32 h# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[30] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 i# d [31:0] $end
$var wire 1 j# wrenable $end
$var reg 32 k# q [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen[31] $end
$scope module register $end
$var wire 1 H clk $end
$var wire 32 l# d [31:0] $end
$var wire 1 m# wrenable $end
$var reg 32 n# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ALU $end
$var wire 32 o# a [31:0] $end
$var wire 32 p# b [31:0] $end
$var wire 1 H clk $end
$var wire 6 q# op [5:0] $end
$var reg 32 r# alu_res [31:0] $end
$var reg 1 s# zeroflag $end
$upscope $end
$scope module MemMux $end
$var wire 1 : address $end
$var wire 32 t# in0 [31:0] $end
$var wire 32 u# in1 [31:0] $end
$var wire 32 v# out [31:0] $end
$upscope $end
$scope module RegMux $end
$var wire 1 A address $end
$var wire 32 w# in0 [31:0] $end
$var wire 32 x# in1 [31:0] $end
$var wire 32 y# out [31:0] $end
$upscope $end
$scope module DstMux $end
$var wire 2 z# address [1:0] $end
$var wire 5 {# in0 [4:0] $end
$var wire 5 |# in1 [4:0] $end
$var wire 5 }# in2 [4:0] $end
$var wire 5 ~# out [4:0] $end
$upscope $end
$scope module AluMuxA $end
$var wire 1 # address $end
$var wire 32 !$ in0 [31:0] $end
$var wire 32 "$ in1 [31:0] $end
$var wire 32 #$ out [31:0] $end
$upscope $end
$scope module AluMuxB $end
$var wire 2 $$ address [1:0] $end
$var wire 32 %$ in0 [31:0] $end
$var wire 32 &$ in1 [31:0] $end
$var wire 32 '$ in2 [31:0] $end
$var wire 32 ($ in3 [31:0] $end
$var wire 32 )$ out [31:0] $end
$upscope $end
$scope module PCMux $end
$var wire 2 *$ address [1:0] $end
$var wire 32 +$ in0 [31:0] $end
$var wire 32 ,$ in1 [31:0] $end
$var wire 32 -$ in2 [31:0] $end
$var wire 32 .$ out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx .$
b0 -$
bx ,$
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 +$
bx *$
bx )$
bx00 ($
bx '$
b0 &$
b1 %$
bx $$
bx #$
b0 "$
b0 !$
bx ~#
b11111 }#
bx |#
bx {#
bx z#
bx y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
xs#
bx r#
bx q#
bx p#
bx o#
bx n#
xm#
bx l#
bx k#
xj#
bx i#
bx h#
xg#
bx f#
bx e#
xd#
bx c#
bx b#
xa#
bx `#
bx _#
x^#
bx ]#
bx \#
x[#
bx Z#
bx Y#
xX#
bx W#
bx V#
xU#
bx T#
bx S#
xR#
bx Q#
bx P#
xO#
bx N#
bx M#
xL#
bx K#
bx J#
xI#
bx H#
bx G#
xF#
bx E#
bx D#
xC#
bx B#
bx A#
x@#
bx ?#
bx >#
x=#
bx <#
bx ;#
x:#
bx 9#
bx 8#
x7#
bx 6#
bx 5#
x4#
bx 3#
bx 2#
x1#
bx 0#
bx /#
x.#
bx -#
bx ,#
x+#
bx *#
bx )#
x(#
bx '#
bx &#
x%#
bx $#
bx ##
x"#
bx !#
bx ~"
x}"
bx |"
bx {"
xz"
bx y"
bx x"
xw"
bx v"
bx u"
xt"
bx s"
bx r"
xq"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
b0 O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
b0 -"
bx ,"
x+"
b0 *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx00 }
bx |
bx {
bx z
bx y
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 x
b0 w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
b111000000000100000000000110010 o
b111000000000100000000000110010 n
b0 m
b0 l
b0 k
1j
bx i
b0 h
1g
bx f
b0 e
1d
bx c
b0 b
1a
b111000000000100000000000110010 `
b0 _
bx ^
bx ]
bx \
bx [
bx Z
xY
xX
xW
bx V
xU
1T
1S
bx R
xQ
xP
bx O
xN
bx M
bx L
bx K
bx J
xI
0H
bx00 G
bx F
bx E
bx D
bx C
xB
xA
b0 @
x?
bx >
bx =
b0 <
x;
1:
b0 9
18
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
b111000000000100000000000110010 .
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 -
b0 ,
x+
bx *
b0 )
bx (
bx '
x&
b0 %
bx $
x#
bx "
0!
$end
#5
0+"
0m#
0j#
0g#
0d#
0a#
0^#
0[#
0X#
0U#
0R#
0O#
0L#
0I#
0F#
0C#
0@#
0=#
0:#
07#
04#
01#
0.#
0+#
0(#
0%#
0"#
0}"
0z"
0w"
0t"
0q"
b11001000 G
b11001000 }
b11001000 ($
b0 Z
b0 \
b0 V
b10000000000011001000 =
b10000000000011001000 ^
b10000000000011001000 .$
b0 >
b0 *$
b0 O
b1 (
b1 p#
b1 )$
b0 $
b0 $$
b0 R
b0 $"
b0 ("
b10 0
b10 &"
b10 '"
b10 ~#
b0 /
b0 z#
0X
0A
0Y
0B
0Q
0+
0P
0&
b0 M
b0 "
b0 q#
0N
0#
1S
18
0U
0;
1T
b111000000000100000000000110010 .
b111000000000100000000000110010 `
b111000000000100000000000110010 n
b111000000000100000000000110010 o
b0 <
b0 l
b0 v#
1:
0W
0?
b111000000000100000000000110010 b
b111000000000100000000000110010 9
b111000000000100000000000110010 x#
bx e
bx %
bx !$
bx h
bx ,
bx m
bx &$
bx k
bx )
bx t#
bx w#
bx -$
b100000000000110010 p
b10000000000011001000 -
b10000000000011001000 x
b10000000000011001000 +$
b100000000000110010 1
b100000000000110010 y
b110010 u
b110010 F
b110010 {
b110010 |
b110010 '$
b110010 4
b110010 z
b1110 v
b1110 3
b1110 K
b1110 [
b0 r
b0 C
b0 c
b0 ~
b0 M"
b0 6
b0 ""
b0 ,"
b10 s
b10 7
b10 #"
b10 N"
b10 {#
b0 q
b0 5
b0 |#
b110010 t
b110010 2
b110010 J
xs#
1!
1H
#10
b1 ]
b1 L
0!
0H
#15
b0 e
b0 %
b0 !$
b1 Z
b1 \
b100000 M
b100000 "
b100000 q#
b1 V
bx =
bx ^
bx .$
b1 >
b1 *$
1N
b0 '
b0 o#
b0 #$
1#
1W
1?
1S
18
1T
b111000000000100000000000110010 .
b111000000000100000000000110010 `
b111000000000100000000000110010 n
b111000000000100000000000110010 o
b0 <
b0 l
b0 v#
1:
xs#
1!
1H
#20
b100 ]
b100 L
0!
0H
#25
b100 Z
b100 \
1Q
1+
1P
1&
b0 V
b0 >
b0 *$
b0 M
b0 "
b0 q#
0N
0#
0S
08
0T
0:
0W
0?
b1 _
b100001100000100000 .
b100001100000100000 `
b100001100000100000 n
b100001100000100000 o
b1 <
b1 l
b1 v#
b0 '
b0 o#
b0 #$
b1 @
b1 w
b1 u#
b1 "$
b1 k
b1 E
b1 %"
b1 )"
b1 p"
b1 s"
b1 v"
b1 y"
b1 |"
b1 !#
b1 $#
b1 '#
b1 *#
b1 -#
b1 0#
b1 3#
b1 6#
b1 9#
b1 <#
b1 ?#
b1 B#
b1 E#
b1 H#
b1 K#
b1 N#
b1 Q#
b1 T#
b1 W#
b1 Z#
b1 ]#
b1 `#
b1 c#
b1 f#
b1 i#
b1 l#
b1 y#
b1 )
b1 t#
b1 w#
b1 -$
0s#
0I
b1 r#
b10000000000011001000 =
b10000000000011001000 ^
b10000000000011001000 .$
b1 *
b1 i
b1 ,$
1!
1H
#30
b1011 ]
b1011 L
0!
0H
#35
b100001100000100000 b
b100001100000100000 9
b100001100000100000 x#
b1011 Z
b1011 \
b10 O
b110010 (
b110010 p#
b110010 )$
b10 $
b10 $$
b1110 M
b1110 "
b1110 q#
0Q
0+
0P
0&
0s#
1!
1H
#40
b0 ]
b0 L
0!
0H
#45
1t"
bx Z
bx \
1Y
b100 $"
b100 ("
1B
b0 O
b1 (
b1 p#
b1 )$
b0 $
b0 $$
b0 M
b0 "
b0 q#
b110010 k
bx .
bx `
bx n
bx o
b110010 <
b110010 l
b110010 v#
b110010 E
b110010 %"
b110010 )"
b110010 p"
b110010 s"
b110010 v"
b110010 y"
b110010 |"
b110010 !#
b110010 $#
b110010 '#
b110010 *#
b110010 -#
b110010 0#
b110010 3#
b110010 6#
b110010 9#
b110010 <#
b110010 ?#
b110010 B#
b110010 E#
b110010 H#
b110010 K#
b110010 N#
b110010 Q#
b110010 T#
b110010 W#
b110010 Z#
b110010 ]#
b110010 `#
b110010 c#
b110010 f#
b110010 i#
b110010 l#
b110010 y#
b110010 )
b110010 t#
b110010 w#
b110010 -$
0s#
b110010 r#
b110010 *
b110010 i
b110010 ,$
1!
1H
#50
0!
0H
#55
0t"
bx b
bx 9
bx x#
b0 Z
b0 \
1S
18
1T
b100001100000100000 .
b100001100000100000 `
b100001100000100000 n
b100001100000100000 o
b1 <
b1 l
b1 v#
1:
0Y
b0 $"
b0 ("
0B
0s#
b110010 u"
b110010 D
b110010 f
b110010 !"
b110010 o"
b110010 9"
b110010 ["
1!
1H
#60
b1 ]
b1 L
0!
0H
#65
b110000010000000 G
b110000010000000 }
b110000010000000 ($
b1 Z
b1 \
b100000 M
b100000 "
b100000 q#
b1 V
b1 >
b1 *$
1N
b1 '
b1 o#
b1 #$
1#
1W
1?
1S
18
1T
b100001100000100000 .
b100001100000100000 `
b100001100000100000 n
b100001100000100000 o
b1 <
b1 l
b1 v#
1:
b100001100000100000 b
b100001100000100000 9
b100001100000100000 x#
b110010 h
b110010 ,
b110010 m
b110010 &$
b100001100000100000 p
b110010 =
b110010 ^
b110010 .$
b10000110000010000000 -
b10000110000010000000 x
b10000110000010000000 +$
b100001100000100000 1
b100001100000100000 y
b1100000100000 u
b1100000100000 F
b1100000100000 {
b1100000100000 |
b1100000100000 '$
b1100000100000 4
b1100000100000 z
b0 v
b0 3
b0 K
b0 [
b11 q
b11 5
b11 |#
b100000 t
b100000 2
b100000 J
0s#
1!
1H
#70
b110 ]
b110 L
0!
0H
#75
b110010 _
b110010 @
b110010 w
b110010 u#
b110010 "$
b110 Z
b110 \
1Q
1+
1P
1&
b0 V
b0 >
b0 *$
b0 M
b0 "
b0 q#
0N
b0 '
b0 o#
b0 #$
0#
0S
08
0T
bx .
bx `
bx n
bx o
b110010 <
b110010 l
b110010 v#
0:
0W
0?
1s#
1I
b10 r#
b10000110000010000000 =
b10000110000010000000 ^
b10000110000010000000 .$
b10 *
b10 i
b10 ,$
1!
1H
#80
b1101 ]
b1101 L
0!
0H
#85
b1101 Z
b1101 \
b1 O
b110010 (
b110010 p#
b110010 )$
b1 $
b1 $$
0Q
0+
0P
0&
bx b
bx 9
bx x#
b10 k
b10 <
b10 l
b10 v#
b10 E
b10 %"
b10 )"
b10 p"
b10 s"
b10 v"
b10 y"
b10 |"
b10 !#
b10 $#
b10 '#
b10 *#
b10 -#
b10 0#
b10 3#
b10 6#
b10 9#
b10 <#
b10 ?#
b10 B#
b10 E#
b10 H#
b10 K#
b10 N#
b10 Q#
b10 T#
b10 W#
b10 Z#
b10 ]#
b10 `#
b10 c#
b10 f#
b10 i#
b10 l#
b10 y#
b10 )
b10 t#
b10 w#
b10 -$
b0 M
b0 "
b0 q#
0s#
0I
1!
1H
#90
b0 ]
b0 L
0!
0H
#95
1w"
bx Z
bx \
b1 R
b11 0
b11 &"
b11 '"
b11 ~#
b1 /
b1 z#
1Y
b1000 $"
b1000 ("
1B
b0 O
b1 (
b1 p#
b1 )$
b0 $
b0 $$
0s#
1!
1H
#100
0!
0H
#105
0w"
b0 Z
b0 \
1S
18
1T
b110010 <
b110010 l
b110010 v#
1:
b0 R
b10 0
b10 &"
b10 '"
b10 ~#
b0 /
b0 z#
0Y
b0 $"
b0 ("
0B
b10 x"
b10 D"
b10 f"
0s#
1!
1H
#110
b1 ]
b1 L
0!
0H
#115
bx00 G
bx00 }
bx00 ($
x+"
xm#
xj#
xg#
xd#
xa#
x^#
x[#
xX#
xU#
xR#
xO#
xL#
xI#
xF#
xC#
x@#
x=#
x:#
x7#
x4#
x1#
x.#
x+#
x(#
x%#
x"#
x}"
xz"
xw"
xt"
xq"
bx p
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 -
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 x
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 +$
bx 1
bx y
bx u
bx F
bx {
bx |
bx '$
bx 4
bx z
bx v
bx 3
bx K
bx [
bx r
bx C
bx c
bx ~
bx M"
bx 6
bx ""
bx ,"
bx s
bx D
bx f
bx !"
bx o"
bx $"
bx ("
bx 0
bx &"
bx '"
bx ~#
bx 7
bx #"
bx N"
bx {#
bx q
bx 5
bx |#
bx t
bx 2
bx J
b1 Z
b1 \
b100000 M
b100000 "
b100000 q#
b1 V
b10 =
b10 ^
b10 .$
b1 >
b1 *$
1N
b110010 '
b110010 o#
b110010 #$
1#
1W
1?
1S
18
1T
b110010 <
b110010 l
b110010 v#
1:
0s#
1!
1H
#120
0!
0H
