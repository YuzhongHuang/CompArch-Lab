$date
	Sat Nov 21 13:41:56 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testCPU $end
$var reg 1 ! clk $end
$var integer 32 " index [31:0] $end
$scope module ourCpu $end
$var wire 6 # ALUOP [5:0] $end
$var wire 1 $ ALU_SRCA $end
$var wire 2 % ALU_SRCB [1:0] $end
$var wire 32 & A_AluMuxA [31:0] $end
$var wire 1 ' A_WE $end
$var wire 32 ( AluMuxA_Alu [31:0] $end
$var wire 32 ) AluMuxB_Alu [31:0] $end
$var wire 32 * AluRes_out [31:0] $end
$var wire 32 + Alu_out [31:0] $end
$var wire 1 , B_WE $end
$var wire 32 - B_out [31:0] $end
$var wire 32 . Concat_PCMux [31:0] $end
$var wire 32 / DM_out [31:0] $end
$var wire 2 0 DST [1:0] $end
$var wire 5 1 DstMux_RegFile [4:0] $end
$var wire 26 2 IR_Concat [25:0] $end
$var wire 6 3 IR_FSM_funct [5:0] $end
$var wire 6 4 IR_FSM_opcode [5:0] $end
$var wire 16 5 IR_Imm16 [15:0] $end
$var wire 5 6 IR_Rd [4:0] $end
$var wire 5 7 IR_Rs [4:0] $end
$var wire 5 8 IR_Rt [4:0] $end
$var wire 1 9 IR_WE $end
$var wire 32 : MDR_RegMux [31:0] $end
$var wire 1 ; MEMIN $end
$var wire 1 < MEM_WE $end
$var wire 32 = MemMux_DM [31:0] $end
$var wire 32 > PCMux_PC [31:0] $end
$var wire 2 ? PC_SRC [1:0] $end
$var wire 1 @ PC_WE $end
$var wire 32 A PC_out [31:0] $end
$var wire 1 B REGIN $end
$var wire 1 C REG_WE $end
$var wire 32 D RegFile_A [31:0] $end
$var wire 32 E RegFile_B [31:0] $end
$var wire 32 F RegMux_RegFile [31:0] $end
$var wire 32 G SEImm_out [31:0] $end
$var wire 32 H Shifter_AluMuxB [31:0] $end
$var wire 1 I clk $end
$var wire 1 J zeroflag $end
$scope module FSM $end
$var wire 6 K IR_ALU_OP [5:0] $end
$var wire 1 I clk $end
$var wire 6 L instr [5:0] $end
$var wire 4 M next_state [3:0] $end
$var wire 1 J zeroflag $end
$var reg 6 N ALU_OP [5:0] $end
$var reg 1 O ALU_SRCA $end
$var reg 2 P ALU_SRCB [1:0] $end
$var reg 1 Q A_WE $end
$var reg 1 R B_WE $end
$var reg 2 S DST [1:0] $end
$var reg 1 T IR_WE $end
$var reg 1 U MEM_IN $end
$var reg 1 V MEM_WE $end
$var reg 2 W PC_SRC [1:0] $end
$var reg 1 X PC_WE $end
$var reg 1 Y REG_IN $end
$var reg 1 Z REG_WE $end
$var reg 4 [ state [3:0] $end
$scope module LUT $end
$var wire 1 I clk $end
$var wire 6 \ opcode [5:0] $end
$var wire 4 ] state [3:0] $end
$var reg 4 ^ next_state [3:0] $end
$upscope $end
$upscope $end
$scope module PC $end
$var wire 1 I clk $end
$var wire 32 _ in [31:0] $end
$var wire 1 @ wr_enable $end
$var reg 32 ` q [31:0] $end
$upscope $end
$scope module MDR $end
$var wire 1 I clk $end
$var wire 32 a in [31:0] $end
$var wire 1 b wr_enable $end
$var reg 32 c q [31:0] $end
$upscope $end
$scope module A $end
$var wire 1 I clk $end
$var wire 32 d in [31:0] $end
$var wire 1 e wr_enable $end
$var reg 32 f q [31:0] $end
$upscope $end
$scope module B $end
$var wire 1 I clk $end
$var wire 32 g in [31:0] $end
$var wire 1 h wr_enable $end
$var reg 32 i q [31:0] $end
$upscope $end
$scope module Alu_Res $end
$var wire 1 I clk $end
$var wire 32 j in [31:0] $end
$var wire 1 k wr_enable $end
$var reg 32 l q [31:0] $end
$upscope $end
$scope module DM $end
$var wire 32 m address [31:0] $end
$var wire 1 I clk $end
$var wire 32 n din [31:0] $end
$var wire 32 o dout [31:0] $end
$var wire 1 < wr_enable $end
$upscope $end
$scope module IR $end
$var wire 1 9 IR_WE $end
$var wire 1 I clk $end
$var wire 32 p instr [31:0] $end
$var reg 26 q J_addr [25:0] $end
$var reg 5 r Rd [4:0] $end
$var reg 5 s Rs [4:0] $end
$var reg 5 t Rt [4:0] $end
$var reg 6 u funct [5:0] $end
$var reg 16 v imm [15:0] $end
$var reg 6 w opcode [5:0] $end
$upscope $end
$scope module Concat $end
$var wire 32 x PC [31:0] $end
$var wire 32 y concat [31:0] $end
$var wire 26 z dout [25:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 16 { imm [15:0] $end
$var wire 32 | se [31:0] $end
$upscope $end
$scope module ShifterLeft2 $end
$var wire 32 } in [31:0] $end
$var wire 32 ~ out [31:0] $end
$upscope $end
$scope module RegisterFile $end
$var wire 1 I Clk $end
$var wire 32 !" ReadData1 [31:0] $end
$var wire 32 "" ReadData2 [31:0] $end
$var wire 5 #" ReadRegister1 [4:0] $end
$var wire 5 $" ReadRegister2 [4:0] $end
$var wire 1 C RegWrite $end
$var wire 32 %" RegisterToWrite [31:0] $end
$var wire 32 &" WriteData [31:0] $end
$var wire 5 '" WriteRegister [4:0] $end
$scope module decoder1 $end
$var wire 5 (" address [4:0] $end
$var wire 1 C enable $end
$var wire 32 )" out [31:0] $end
$upscope $end
$scope module register0 $end
$var wire 1 I clk $end
$var wire 32 *" d [31:0] $end
$var wire 32 +" q [31:0] $end
$var wire 1 ," wrenable $end
$upscope $end
$scope module mux1 $end
$var wire 5 -" address [4:0] $end
$var wire 32 ." input0 [31:0] $end
$var wire 32 /" input1 [31:0] $end
$var wire 32 0" input10 [31:0] $end
$var wire 32 1" input11 [31:0] $end
$var wire 32 2" input12 [31:0] $end
$var wire 32 3" input13 [31:0] $end
$var wire 32 4" input14 [31:0] $end
$var wire 32 5" input15 [31:0] $end
$var wire 32 6" input16 [31:0] $end
$var wire 32 7" input17 [31:0] $end
$var wire 32 8" input18 [31:0] $end
$var wire 32 9" input19 [31:0] $end
$var wire 32 :" input2 [31:0] $end
$var wire 32 ;" input20 [31:0] $end
$var wire 32 <" input21 [31:0] $end
$var wire 32 =" input22 [31:0] $end
$var wire 32 >" input23 [31:0] $end
$var wire 32 ?" input24 [31:0] $end
$var wire 32 @" input25 [31:0] $end
$var wire 32 A" input26 [31:0] $end
$var wire 32 B" input27 [31:0] $end
$var wire 32 C" input28 [31:0] $end
$var wire 32 D" input29 [31:0] $end
$var wire 32 E" input3 [31:0] $end
$var wire 32 F" input30 [31:0] $end
$var wire 32 G" input31 [31:0] $end
$var wire 32 H" input4 [31:0] $end
$var wire 32 I" input5 [31:0] $end
$var wire 32 J" input6 [31:0] $end
$var wire 32 K" input7 [31:0] $end
$var wire 32 L" input8 [31:0] $end
$var wire 32 M" input9 [31:0] $end
$var wire 32 N" out [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 5 O" address [4:0] $end
$var wire 32 P" input0 [31:0] $end
$var wire 32 Q" input1 [31:0] $end
$var wire 32 R" input10 [31:0] $end
$var wire 32 S" input11 [31:0] $end
$var wire 32 T" input12 [31:0] $end
$var wire 32 U" input13 [31:0] $end
$var wire 32 V" input14 [31:0] $end
$var wire 32 W" input15 [31:0] $end
$var wire 32 X" input16 [31:0] $end
$var wire 32 Y" input17 [31:0] $end
$var wire 32 Z" input18 [31:0] $end
$var wire 32 [" input19 [31:0] $end
$var wire 32 \" input2 [31:0] $end
$var wire 32 ]" input20 [31:0] $end
$var wire 32 ^" input21 [31:0] $end
$var wire 32 _" input22 [31:0] $end
$var wire 32 `" input23 [31:0] $end
$var wire 32 a" input24 [31:0] $end
$var wire 32 b" input25 [31:0] $end
$var wire 32 c" input26 [31:0] $end
$var wire 32 d" input27 [31:0] $end
$var wire 32 e" input28 [31:0] $end
$var wire 32 f" input29 [31:0] $end
$var wire 32 g" input3 [31:0] $end
$var wire 32 h" input30 [31:0] $end
$var wire 32 i" input31 [31:0] $end
$var wire 32 j" input4 [31:0] $end
$var wire 32 k" input5 [31:0] $end
$var wire 32 l" input6 [31:0] $end
$var wire 32 m" input7 [31:0] $end
$var wire 32 n" input8 [31:0] $end
$var wire 32 o" input9 [31:0] $end
$var wire 32 p" out [31:0] $end
$upscope $end
$scope begin registerGen[1] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 q" d [31:0] $end
$var wire 1 r" wrenable $end
$var reg 32 s" q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[2] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 t" d [31:0] $end
$var wire 1 u" wrenable $end
$var reg 32 v" q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[3] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 w" d [31:0] $end
$var wire 1 x" wrenable $end
$var reg 32 y" q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[4] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 z" d [31:0] $end
$var wire 1 {" wrenable $end
$var reg 32 |" q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[5] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 }" d [31:0] $end
$var wire 1 ~" wrenable $end
$var reg 32 !# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[6] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 "# d [31:0] $end
$var wire 1 ## wrenable $end
$var reg 32 $# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[7] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 %# d [31:0] $end
$var wire 1 &# wrenable $end
$var reg 32 '# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[8] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 (# d [31:0] $end
$var wire 1 )# wrenable $end
$var reg 32 *# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[9] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 +# d [31:0] $end
$var wire 1 ,# wrenable $end
$var reg 32 -# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[10] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 .# d [31:0] $end
$var wire 1 /# wrenable $end
$var reg 32 0# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[11] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 1# d [31:0] $end
$var wire 1 2# wrenable $end
$var reg 32 3# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[12] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 4# d [31:0] $end
$var wire 1 5# wrenable $end
$var reg 32 6# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[13] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 7# d [31:0] $end
$var wire 1 8# wrenable $end
$var reg 32 9# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[14] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 :# d [31:0] $end
$var wire 1 ;# wrenable $end
$var reg 32 <# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[15] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 =# d [31:0] $end
$var wire 1 ># wrenable $end
$var reg 32 ?# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[16] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 @# d [31:0] $end
$var wire 1 A# wrenable $end
$var reg 32 B# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[17] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 C# d [31:0] $end
$var wire 1 D# wrenable $end
$var reg 32 E# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[18] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 F# d [31:0] $end
$var wire 1 G# wrenable $end
$var reg 32 H# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[19] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 I# d [31:0] $end
$var wire 1 J# wrenable $end
$var reg 32 K# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[20] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 L# d [31:0] $end
$var wire 1 M# wrenable $end
$var reg 32 N# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[21] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 O# d [31:0] $end
$var wire 1 P# wrenable $end
$var reg 32 Q# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[22] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 R# d [31:0] $end
$var wire 1 S# wrenable $end
$var reg 32 T# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[23] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 U# d [31:0] $end
$var wire 1 V# wrenable $end
$var reg 32 W# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[24] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 X# d [31:0] $end
$var wire 1 Y# wrenable $end
$var reg 32 Z# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[25] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 [# d [31:0] $end
$var wire 1 \# wrenable $end
$var reg 32 ]# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[26] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 ^# d [31:0] $end
$var wire 1 _# wrenable $end
$var reg 32 `# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[27] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 a# d [31:0] $end
$var wire 1 b# wrenable $end
$var reg 32 c# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[28] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 d# d [31:0] $end
$var wire 1 e# wrenable $end
$var reg 32 f# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[29] $end
$scope begin genblk2 $end
$var wire 1 g# data $end
$upscope $end
$upscope $end
$scope begin registerGen[30] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 h# d [31:0] $end
$var wire 1 i# wrenable $end
$var reg 32 j# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin registerGen[31] $end
$scope begin genblk4 $end
$scope module register $end
$var wire 1 I clk $end
$var wire 32 k# d [31:0] $end
$var wire 1 l# wrenable $end
$var reg 32 m# q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ALU $end
$var wire 32 n# a [31:0] $end
$var wire 32 o# b [31:0] $end
$var wire 1 I clk $end
$var wire 6 p# op [5:0] $end
$var reg 32 q# alu_res [31:0] $end
$var reg 1 r# zeroflag $end
$upscope $end
$scope module MemMux $end
$var wire 1 ; address $end
$var wire 32 s# in0 [31:0] $end
$var wire 32 t# in1 [31:0] $end
$var wire 32 u# out [31:0] $end
$upscope $end
$scope module RegMux $end
$var wire 1 B address $end
$var wire 32 v# in0 [31:0] $end
$var wire 32 w# in1 [31:0] $end
$var wire 32 x# out [31:0] $end
$upscope $end
$scope module DstMux $end
$var wire 2 y# address [1:0] $end
$var wire 5 z# in0 [4:0] $end
$var wire 5 {# in1 [4:0] $end
$var wire 5 |# in2 [4:0] $end
$var wire 5 }# out [4:0] $end
$upscope $end
$scope module AluMuxA $end
$var wire 1 $ address $end
$var wire 32 ~# in0 [31:0] $end
$var wire 32 !$ in1 [31:0] $end
$var wire 32 "$ out [31:0] $end
$upscope $end
$scope module AluMuxB $end
$var wire 2 #$ address [1:0] $end
$var wire 32 $$ in0 [31:0] $end
$var wire 32 %$ in1 [31:0] $end
$var wire 32 &$ in2 [31:0] $end
$var wire 32 '$ in3 [31:0] $end
$var wire 32 ($ out [31:0] $end
$upscope $end
$scope module PCMux $end
$var wire 2 )$ address [1:0] $end
$var wire 32 *$ in0 [31:0] $end
$var wire 32 +$ in1 [31:0] $end
$var wire 32 ,$ in2 [31:0] $end
$var wire 32 -$ out [31:0] $end
$upscope $end
$upscope $end
$scope begin registerGen $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx -$
bx ,$
bx +$
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 *$
bx )$
bx ($
bx00 '$
bx &$
b0 %$
b1 $$
bx #$
bx "$
b0 !$
b0 ~#
bx }#
b11111 |#
bx {#
bx z#
bx y#
bx x#
b0 w#
bx v#
b0 u#
b0 t#
bx s#
xr#
bx q#
bx p#
bx o#
bx n#
bx m#
xl#
bx k#
bx j#
xi#
bx h#
zg#
bx f#
xe#
bx d#
bx c#
xb#
bx a#
bx `#
x_#
bx ^#
bx ]#
x\#
bx [#
bx Z#
xY#
bx X#
bx W#
xV#
bx U#
bx T#
xS#
bx R#
bx Q#
xP#
bx O#
bx N#
xM#
bx L#
bx K#
xJ#
bx I#
bx H#
xG#
bx F#
bx E#
xD#
bx C#
bx B#
xA#
bx @#
bx ?#
x>#
bx =#
bx <#
x;#
bx :#
bx 9#
x8#
bx 7#
bx 6#
x5#
bx 4#
bx 3#
x2#
bx 1#
bx 0#
x/#
bx .#
bx -#
x,#
bx +#
bx *#
x)#
bx (#
bx '#
x&#
bx %#
bx $#
x##
bx "#
bx !#
x~"
bx }"
bx |"
x{"
bx z"
bx y"
xx"
bx w"
bx v"
xu"
bx t"
bx s"
xr"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bz f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
b0 P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bz D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
b0 ."
bx -"
x,"
b0 +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx00 ~
bx }
bx |
bx {
bx z
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 y
b0 x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
b111000000000100000000000110010 p
b111000000000100000000000110010 o
b0 n
b0 m
bx l
1k
bx j
b0 i
1h
bx g
b0 f
1e
bx d
b0 c
1b
b111000000000100000000000110010 a
b0 `
bx _
bx ^
bx ]
bx \
bx [
xZ
xY
xX
bx W
xV
1U
1T
bx S
xR
xQ
bx P
xO
bx N
bx M
bx L
bx K
xJ
0I
bx00 H
bx G
bx F
bx E
bx D
xC
xB
b0 A
x@
bx ?
bx >
b0 =
x<
1;
b0 :
19
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
b111000000000100000000000110010 /
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 .
b0 -
x,
bx +
bx *
bx )
bx (
x'
b0 &
bx %
x$
bx #
bx "
0!
$end
#5
0,"
0l#
0i#
0e#
0b#
0_#
0\#
0Y#
0V#
0S#
0P#
0M#
0J#
0G#
0D#
0A#
0>#
0;#
08#
05#
02#
0/#
0,#
0)#
0&#
0##
0~"
0{"
0x"
0u"
0r"
xr#
b11001000 H
b11001000 ~
b11001000 '$
b0 [
b0 ]
b0 W
b10000000000011001000 >
b10000000000011001000 _
b10000000000011001000 -$
b0 ?
b0 )$
b0 P
b1 )
b1 o#
b1 ($
b0 %
b0 #$
b0 S
b0 %"
b0 )"
b10 1
b10 '"
b10 ("
b10 }#
b0 0
b0 y#
0Y
0B
0Z
0C
0R
0,
0Q
0'
b0 N
b0 #
b0 p#
0O
0$
1T
19
0V
0<
1U
b111000000000100000000000110010 /
b111000000000100000000000110010 a
b111000000000100000000000110010 o
b111000000000100000000000110010 p
b0 =
b0 m
b0 u#
1;
0X
0@
b111000000000100000000000110010 c
b111000000000100000000000110010 :
b111000000000100000000000110010 w#
bx f
bx &
bx ~#
bx i
bx -
bx n
bx %$
b100000000000110010 q
b10000000000011001000 .
b10000000000011001000 y
b10000000000011001000 *$
b100000000000110010 2
b100000000000110010 z
b110010 v
b110010 G
b110010 |
b110010 }
b110010 &$
b110010 5
b110010 {
b1110 w
b1110 4
b1110 L
b1110 \
b0 s
b0 D
b0 d
b0 !"
b0 N"
b0 7
b0 #"
b0 -"
b10 t
b10 8
b10 $"
b10 O"
b10 z#
b0 r
b0 6
b0 {#
b110010 u
b110010 3
b110010 K
1!
1I
#10
b1 ^
b1 M
0!
0I
#15
b1 q#
b1 +
b1 j
b1 +$
0r#
0J
b0 f
b0 &
b0 ~#
b1 [
b1 ]
b100000 N
b100000 #
b100000 p#
b1 W
b1 >
b1 _
b1 -$
b1 ?
b1 )$
1O
b0 (
b0 n#
b0 "$
1$
1X
1@
1T
19
1U
b111000000000100000000000110010 /
b111000000000100000000000110010 a
b111000000000100000000000110010 o
b111000000000100000000000110010 p
b0 =
b0 m
b0 u#
1;
1!
1I
#20
b1 l
b1 F
b1 &"
b1 *"
b1 q"
b1 t"
b1 w"
b1 z"
b1 }"
b1 "#
b1 %#
b1 (#
b1 +#
b1 .#
b1 1#
b1 4#
b1 7#
b1 :#
b1 =#
b1 @#
b1 C#
b1 F#
b1 I#
b1 L#
b1 O#
b1 R#
b1 U#
b1 X#
b1 [#
b1 ^#
b1 a#
b1 d#
b1 h#
b1 k#
b1 x#
b1 *
b1 s#
b1 v#
b1 ,$
b100 ^
b100 M
0!
0I
b100000 "
